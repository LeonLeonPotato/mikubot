#include "main.h"
#include "essential.h"
#include "ansicodes.h"
#include "opcontrol/test/odom_center.h"
#include "Eigen/Dense"
#include "pros/misc.hpp"
#include "pros/rtos.hpp"
#include "telemetry.h" // IWYU pragma: keep

#include "autonomous/odometry.h"
#include "autonomous/pathing.h"
#include "autonomous/strategies.h"
#include "autonomous/pathing/polynomial.h"

#include "gui/autonselector.h"
#include "gui/autonrunner.h"
#include "gui/goofymiku.h"
#include "gui/opcontrolinfo.h"

#include "opcontrol/opcontrol.h"
#include <cmath>
#include <string>

#include "pros/apix.h"

static const auto PREFIX = ANSI_BOLD + ANSI_CYAN + "[Miku" + ANSI_GREEN + "bot] " + ANSI_RESET;

void initialize(void) {
	pros::c::serctl(SERCTL_DISABLE_COBS, nullptr);
	std::cout << PREFIX << "Initializing robot\n";

	robot::init();
	// odometry::start_task();
	opcontrolinfo::init();

	if (!pros::competition::is_connected()) {
		std::cout << PREFIX << "Robot is not connected to the field controller, manually calling functions\n";
		// competition_initialize();
		// telemetry::start_task();
		// autonomous();
	}
}

void disabled(void) {
	std::cout << PREFIX << "Robot has been disabled\n";
}

void competition_initialize(void) {
	std::cout << PREFIX << "Competition initializing\n";

	autonselector::init();
	do {
		pros::delay(50);
	} while (autonselector::finished_selection == false);
	autonselector::destroy();
	std::cout << PREFIX << "Auton selection has finished\n";

	autonrunner::init();
}

void autonomous(void) {
	std::cout << PREFIX << "Running autonomous\n";
	autonrunner::init();

	strategies::functions.at(strategies::chosen_strategy)();
}

static void profiling_test(void) {
	pathing::QuinticSpline qs;
	qs.points.emplace_back(0, 0);
	qs.points.emplace_back(500, 500);

	// qs.set_relative(robot::pos);
	qs.solve_coeffs({
		.start_heading = 0,
		.start_magnitude = 1000,
		.end_heading = 0,
		.end_magnitude = 0
	});
	std::cout << qs.debug_out() << std::endl;
	long long start = pros::micros();
	qs.profile_path({
		.start_v = 10,
		.end_v = 0,
		.max_speed = 140,
		.accel = 300,
		.decel = 237,
		.track_width = 39,
		.ds = 2.0,
		.resolution = 10000
	});
	// asd
	auto t = pros::micros() - start;

	pros::delay(20);
	printf("Profile path took %lld us\n", t);

	std::cout << "[";
	int cnt = 0;
	for (auto& p : qs.get_profile()) {
		std::cout << "(" + std::to_string(p.s) + ", " + std::to_string(p.right_v) << ")";
		pros::delay(20);
		cnt++;
		if (cnt != qs.get_profile().size()) {
			std::cout << ", ";
		}
		if (cnt % 10 == 0) {
			std::cout << std::endl;
		}
	}
	std::cout << "]" << std::endl;
}

#define PRINT_VEC(x) printf("[%.3f, %.3f]\n", x(0), x(1))

static void is_it_actually_faster(void) {
	pathing::Polynomial2D<6> p = pathing::Polynomial2D<6>();
	p.x_poly.coeffs << 1, -49.2, 5.2, 2, 3, 4;
	p.y_poly.coeffs << 9.2, 8.888, 2.2, -4, 3, 4;

	auto times = Eigen::ArrayXf::LinSpaced(10000, 0, 1);
	Eigen::MatrixX2f res (times.size(), 2);
	auto ref = Eigen::Ref<Eigen::MatrixX2f>(res);

	long long start = pros::micros();
	p.compute(times, ref, 0);
	auto t1 = pros::micros() - start;
	printf("Polynomial2D vectorized took %lld us\n", t1);

	// start = pros::micros();
	// for (int i = 0; i < times.size(); i++) {
	// 	res.row(i) = p.compute(times(i), 0);
	// }
	// auto t2 = pros::micros() - start;
	// printf("Polynomial2D single took %lld us\n", t2);

	PRINT_VEC(res.row(0));
	PRINT_VEC(res.row(100));
}

static Eigen::VectorXf softmax(const Eigen::VectorXf& vec) {
    // Step 1: Compute exponentials of each element
    Eigen::VectorXf exp_vec = vec.array().exp();
    
    // Step 2: Compute the sum of the exponentials
    double sum_exp = exp_vec.sum();
    
    // Step 3: Normalize the exponentials
    return exp_vec / sum_exp;
}

static void eigen_learning(void) {
	Eigen::Matrix<float, 10, 64> weights {
		{-0.067843914, -0.048732087, -0.38797545, -1.1206234, -1.594612, -0.5756507, -0.49779505, -0.051809177, 0.038885266, -1.8857903, -1.0245658, -0.5713233, 1.1087464, 0.419382, -0.4317897, -1.0855068, -0.38422453, -0.65542746, -0.9024692, 0.3219992, 0.69241387, 2.4144232, 0.15511137, -2.0096345, -1.2670584, 0.4591745, 0.14414904, 0.56213754, -4.9520736, -0.486779, 1.9705306, -0.35991126, -0.44474658, 1.0713631, 2.2546382, -2.4702106, -6.262924, -0.07428068, 0.9602667, 0.719852, -0.63028836, 0.26888803, 1.8808062, -0.85195965, -0.55593723, 0.5166894, -0.39915925, -0.40948182, -0.23316057, -0.38830623, 0.80316085, 2.1246336, 0.6885568, -0.8383716, -1.611719, -0.5553341, 0.05561106, -0.7522059, -2.1751606, -1.9095125, -3.9306247, -2.4973297, -1.2120397, -0.050376385},
		{-0.07806143, 0.1185898, -0.14505744, -1.0057334, -0.6995388, -0.6370593, -0.18891442, -0.041137874, -0.011563852, -0.84056026, -4.6290774, -0.43446615, -0.43028277, 0.25672424, 1.0776274, -0.3695448, 0.0113472575, -1.4863538, -7.03631, -2.035337, 0.42993873, -2.606627, -3.5592842, -1.2873194, -0.17283764, -0.43159598, -6.735031, -2.4314394, 4.0629816, -2.1857846, -2.7157283, -0.5845886, -0.009395303, -0.5943603, -4.90254, -0.18316302, 1.5592865, -7.740303, -2.6649094, -0.75647336, -0.18589422, -4.173569, -0.51175547, 1.8517618, -1.3888842, -6.637495, -1.886549, 0.4241174, 0.039110836, 0.8953131, 0.15833178, -2.3658516, 0.89143354, -3.0195665, -2.0738633, 0.07603964, -0.09539646, -0.83466995, -3.1364677, -3.654865, -4.65228, -0.9891924, -0.22018413, 0.11153817},
		{0.09769982, -0.04768148, 0.66476554, 1.0644321, 0.69949454, 0.18263248, -0.6404873, -0.06951594, 0.076171756, 0.3911248, 2.1967418, 3.1709569, 2.553711, 0.118203565, -1.1875023, -0.6282147, -0.3309661, 0.33896708, 0.27441642, -0.79204136, 0.3572134, -0.06378086, -1.1340885, -1.372451, -0.5618966, -6.077844, -8.25589, -6.5808425, -1.7964363, -0.57554364, -1.0581564, -1.5951315, -0.6497715, -0.19416472, 0.11259265, 0.5747096, -0.09493541, -1.3239155, -0.78049105, 0.43723398, 0.27653772, 1.9370512, 2.3352892, 2.4942386, 1.393064, 1.02043, 2.758873, 2.0792642, -0.15970895, 0.50581396, 0.28565884, -1.6428496, -1.0605239, 1.2121228, 1.7897074, 0.85059917, 0.042998254, -0.90221107, -2.7640502, -2.3870215, -2.0291421, -1.8103622, -1.1477634, 0.020257562},
		{0.09979445, 0.058249578, -0.7148119, -1.8098813, -0.00476862, 0.34229514, -0.1284395, -0.0018972605, -0.08619422, 1.508837, 1.7330797, 1.7037705, 0.7052966, -0.681693, -2.9948032, -0.28558114, -1.5123258, 2.0148938, -0.04215237, -2.1594906, 2.2740357, 1.4193281, -0.6014738, -1.8469461, -1.3312194, -2.4263453, -4.5528126, -0.77295345, 2.2314868, -0.6217957, -3.0848558, -1.2501123, 0.56707305, -1.5391515, -2.8053298, -1.2993889, -0.5541969, 1.0906836, 0.095600165, -1.7228104, 0.9411226, 2.3327339, -1.738076, -4.5868325, 0.0027281737, 1.9012433, 0.9566291, -1.2244124, 0.3506542, 2.8156512, 1.7614197, 1.1063073, 0.64572495, 0.35431024, -0.89861566, 0.37734324, -0.11366819, 0.69271815, 1.7287852, 2.1512048, 1.5817802, -1.8341192, 0.33371356, -0.10156928},
		{0.00077869, -0.11589719, -1.4737515, -2.905177, -2.04934, -1.2124758, -0.8326256, 0.046846643, 0.0611801, 0.37281916, -2.362849, -4.2083745, -3.4600942, -0.7347407, 0.6249722, -0.51597726, -0.7009297, -0.66355526, -0.7985608, -2.2364857, -4.7660336, -0.33543226, -0.730053, -0.55595714, -0.90787005, -0.85669416, 2.2685761, 1.4030697, 0.20739363, 0.50739133, -0.8892694, -1.2673668, 0.26667547, 1.5926582, 2.6463687, 2.8134456, 3.033957, 1.3753077, -0.09088953, -1.1075981, -0.5695581, -3.1695316, -2.65739, -1.6979566, 0.471644, -1.8295615, -2.9377992, -1.061513, 0.025742413, -3.9384274, -2.7787132, -1.4520593, -0.9109722, 0.62347996, 0.2164879, -0.67300415, 0.08625767, -1.167574, -2.4680173, -3.3129895, -4.119949, -3.4736135, -1.6264377, -0.072293},
		{0.07275325, 0.007356882, -0.1341632, -1.1497339, -1.2189537, -1.8838477, -0.5440281, 0.06444192, 0.06800233, -1.5478501, -1.684859, -0.6424489, -0.43852836, 0.9287573, 1.8838602, 0.7115992, -0.840426, -2.7977955, 0.66265404, 0.7374117, -0.6536526, 0.4113411, 4.6255193, 2.3217094, -2.0218217, 0.9219991, 1.8000699, 3.8603606, -2.587387, -5.579814, -9.71012, -1.3150059, -0.5453173, -2.5841472, -1.5560676, -1.2568686, -2.5502732, 0.09021581, 0.649996, -1.417473, -0.7811843, 1.0751586, -0.6526039, -2.7485628, -0.24436307, 0.8094747, 0.637014, -0.34257507, -0.13490584, -1.5000824, 1.1005291, 1.5240308, 0.4206696, 0.71792877, 0.796838, 0.075619735, -0.016187608, -1.5651758, -0.73475546, 0.5791783, -0.2724129, -1.5938346, -0.035487786, -0.0964572},
		{-0.02688159, 0.031068787, 0.021364588, -0.03769568, 0.22252886, 0.26157075, 0.7981108, -0.05528404, -0.101529285, -0.2152521, 0.16549331, -0.7718733, 0.57993317, 2.4955583, -0.17065434, -0.5677563, -0.33695105, -2.462748, -1.1407669, -1.6837463, -3.368104, -6.115952, -5.9176135, -0.9327907, -1.2494158, -0.7919305, 0.13516265, 1.3390822, -1.8403956, -1.0813111, 1.4801654, 0.5734431, -0.31251168, -0.9784796, 1.4166425, 1.2440989, -0.16905878, 0.784177, 1.6426635, 0.7394444, -0.70245457, -3.4267082, 0.5997486, 4.166583, 1.6262064, 1.8053815, -0.079995275, -1.6219733, -0.1059303, -2.9423678, -3.9361224, -1.284118, -0.8416846, -2.238766, -3.2786758, -0.79673797, 0.03811775, -0.062648095, -1.9507827, -2.1065288, -3.4276664, -2.1649816, -0.95741624, 0.0111374855},
		{-0.06516375, 0.024490267, -0.55855143, -0.9863059, -0.68301797, -0.13821536, -0.053525805, 0.0027132928, 0.12487078, -0.4722787, -1.741912, -4.8641853, -5.9431443, -4.872909, -3.4240632, -0.66814065, 0.8124422, 2.2221246, 1.5470238, 1.9104363, 1.8989421, 1.6858475, -0.56206554, -1.3110002, 1.7070605, 1.7731166, 0.037026636, -2.053072, 0.8180327, 2.6804004, 0.01794738, -0.6338562, -0.2404434, -0.30939516, -2.9927123, -6.1654596, -0.67796993, 1.4542708, -0.28570926, -0.486908, -0.63453835, -3.9003298, -5.0686803, -0.5134388, 0.12549786, -2.4075415, -4.831658, -0.5002168, -0.14200298, -2.6593702, -0.8462924, 0.5247331, -0.96241003, -2.5030122, -2.9595294, 0.046039112, 0.11959699, 1.2606955, 1.5448625, 1.1516967, 2.0850363, 2.12851, 0.73437864, -0.122393936},
		{0.114252254, 0.06409165, -0.7570391, -1.1252828, -1.7554427, -1.502166, -0.52518815, -0.04144065, 0.069730625, -2.162603, -1.102454, -0.23590092, 0.51199913, 0.29429483, 0.19438137, 0.48585647, -0.823282, -0.065396614, 1.3504844, 1.1975764, -1.379231, 0.963305, 1.2563611, 0.46812782, -1.8120553, 1.1458972, 0.55196655, 1.4602119, -0.014312914, 0.20877323, 1.6055468, 1.7981758, -0.49815878, -4.026852, -2.134628, 1.868578, 0.59591746, -2.4983795, -2.9303427, -1.9494998, -0.70668447, -1.3001152, 0.9792673, 0.35391426, -1.4410677, -0.5638431, -0.55554193, -1.575004, -0.18571569, -1.0268041, -0.06694978, 1.3777165, 2.0981627, 0.90379244, -0.009618341, 0.0680744, -0.063691586, -1.8781992, -1.7068157, 0.04264451, 0.67551476, -0.018317588, -1.4268653, 0.027882248},
		{0.031011954, 0.07101241, -0.39449444, -1.5188395, -1.2791448, -1.0674106, -0.29863554, -0.0040841848, -0.11538841, -1.4164705, -3.903501, -4.0062304, -5.058272, -5.034717, -4.183506, -1.0201526, -0.85691136, -2.5303826, -1.0090709, 2.704705, 2.6651952, -0.12691015, -2.4614625, -2.2881286, -1.691356, 1.2749329, 2.1756997, 0.08797183, -0.04696587, 2.2349234, 0.30179802, -1.7996715, -0.16599938, 0.579485, 0.60245603, 1.1675817, 1.3326591, -0.17546399, -3.7302783, -0.01992338, -0.4550891, -3.2830908, -2.5675938, -2.2609382, -0.07086099, -2.0516727, -2.7361412, -1.1518874, 0.0052944417, -3.1304944, -1.8869022, -1.0038279, -1.5260752, 0.38046932, 0.5536147, -0.59520787, 0.03543809, -0.4642005, 0.2745174, -0.65085065, -0.79702705, 0.7297158, 0.72414577, -0.025106728}
	};

	Eigen::Vector<float, 10> bias {
		-0.7698714, 3.6933117, -0.22064371, -1.0793518, 0.6812469, 2.2593782, -0.0682958, 1.5768793, -3.876964, -1.5246464
	};

	while (true) {
		std::string raw_input 
= "\
00000000\
00011000\
00110100\
00110100\
00011100\
00011100\
00011100\
00000000";

		Eigen::Matrix<float, 64, 1> input;
		for (int i = 0; i < 8; i++) {
			for (int j = 0; j < 8; j++) {
				input((8*i)+j) = (float) (raw_input.at(8*i+j) - '0');
			}
		}
		
		Eigen::VectorXf output = weights * input + bias;
		output = softmax(output);
		// perform softmax

		std::cout << "Output: " << output.transpose() << std::endl;
		int predicted = -1;
		for (int i = 0; i < output.size(); i++) {
			if (predicted == -1 || output(i) > output(predicted)) {
				predicted = i;
			}
		}
		std::cout << "Predicted: " << predicted << std::endl;

		break;
	}
}

void opcontrol(void) {
	std::cout << PREFIX << "Operator control started\n";
	autonrunner::destroy(); pros::delay(10);
	autonselector::destroy(); pros::delay(10);
	// opcontrolfun::init();

	// profiling_test();
	// pros::delay(100);
	// is_it_actually_faster();

	// controls::odom_centering::run();
	eigen_learning();

	int cnt = 0;
	while (true) {
		for (auto& func : controls::ticks) {
			func();
		}
		pros::delay(10);
		cnt++;
	}
}